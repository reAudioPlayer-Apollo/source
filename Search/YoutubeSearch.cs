using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Upload;
using Google.Apis.Util.Store;
using Google.Apis.YouTube.v3;
using Google.Apis.YouTube.v3.Data;

namespace reAudioPlayerML.Search
{
    public class Youtube
    {
        public enum type
        {
            Video, Channel, Playlist, All
        }

        public async Task<IList<SearchResult>> relatedToId(string id)
        {
            var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "AIzaSyBSFxNBKeB-vPSUz7yZFONWZq6_fHsXUHM",
                ApplicationName = this.GetType().ToString()
            });

            var searchListRequest = youtubeService.Search.List("snippet");
            searchListRequest.Type = "video";
            searchListRequest.MaxResults = 50;
            searchListRequest.RelatedToVideoId = id;
            searchListRequest.VideoCategoryId = "10";
            var searchListResponse = await searchListRequest.ExecuteAsync();

            return searchListResponse.Items;
        }

        public async Task<Video> byId(string id)
        {
            var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "AIzaSyBSFxNBKeB-vPSUz7yZFONWZq6_fHsXUHM",
                ApplicationName = this.GetType().ToString()
            });

            var searchListRequest = youtubeService.Videos.List("snippet, contentDetails, statistics");
            searchListRequest.Id = id;
            var searchListResponse = await searchListRequest.ExecuteAsync();

            if (searchListResponse.Items.Count <= 0)
                return null;

            var video = searchListResponse.Items[0];
            var description = video.Snippet.Description;
            var title = video.Snippet.Title;
            var channel = video.Snippet.ChannelTitle;
            var likes = video.Statistics.LikeCount;
            var dislikes = video.Statistics.DislikeCount;
            var views = video.Statistics.ViewCount;
            var publishDate = video.Snippet.PublishedAt;

            var isMusic = video.Snippet.CategoryId == "10";

            var rating = 100.0 * likes / (likes + dislikes);

            return video;
        }

        public async Task<bool> isMusic(Video video)
        {
            var description = video.Snippet.Description;

            return description.Contains("Auto-generated by YouTube.");
        }

        public async Task<bool> hasChapters(Video video)
        {
            return (await getChapters(video)).Count > 0;
        }

        public List<TimeSpan> chapterStamps = new List<TimeSpan>();

        public async Task<List<string>> getChapters(Video video)
        {
            chapterStamps = new List<TimeSpan>();
            string description = "Best of Future House Mix 2020 by Jay Eskar\n\nTracklist: \n0:00 - Jay Eskar - You & I (Release: 10.07.2020)\n- Presave: https://www.gate.fm/ty3vWmOx\n\n1:24 - Sickrate & Rentz - Ready For Ya \n2:46 - Trevor Omoto - The Way \n4:18 - CALVO & Agatino Romero - Open Road (Panda Bounce Mix)\n6:08 - Xpace & Justin Petti - Hold Me (ft. joegarratt)\n7:24 - Crunkz - Thinkin Bout You \n8:57 - Divite, Jubly & Cuervo - On Fire (ft. Anthony Meyer)\n10:27 - jeonghyeon & TastyHills - Your Eyes\n11:29 - Jonny Oski & H4NDLES - Bye Bye \n12:44 - Markhese & Love Kr3w - Earthquake\n13:59 - Shockz - Fade Away\n14:59 - The Cousins - Heartbeat\n16:31 - Blaze U & LANN\u00c9 - Next To You \n17:47 - Blaze U & LANN\u00c9 x Kilian K - Faded\n18:48 - Blaze U & LANN\u00c9 - If You Stay \n20:18 - Minerro - All Night \n22:42 - BERO - Following The Waves \n24:05 - Showmain ft. Hsiao Yo - Won_t Let You Go\n27:26 - DAN\u00caL - Coming Home ft. Tiitus Uusitalo \n28:45 - Madistt & Ordinary - Dance With Me\n30:34 - ALLG - Energy (Extended Mix)\n32:35 - Carl Zeer - Sit Down (ft. LexBlaze)\n33:43 - WKB & Bad Reputation - Autta Here \n34:45 - GLN & Mark Vox - Burn \n36:04 - Kusta5 - Step \n37:24 - Guglielmo Nasini - Party Gurl \n38:40 - Ideo & Fax - MKTLD \n39:55 - jeonghyeon - Save Me \n40:59 - Mr. Mess - Tell Me Now \n42:17 - NDR8 - Cali \n43:17 - Mariline - Believe \n44:17 - Tim Paul - Carousel \n45:37 - Ranqz - You Don_t Know\n46:38 - BVRNT & Maone - Keep Tryin\n48:12 - Joy Baller - Midnight Sun\n49:32 - KOCMO - Electricity \n50:51 - MLSTRM - Gloria\n52:37 - Palm - On My Way \n53:52 - RYZY & Two Sides - Who We Are\n55:12 - Relaiz & Jonny Oski - Made Of Gold (ft. Laura Frohnert)\n56:13 - Sunlike Brothers - She Is A Woman (ft. Brenton Mattheus)\n58:00 - jeonghyeon x Kooky - Here We Go Again \n59:35 - Aitor Hertz - If You Break\n\nFollow Jay Eskar\nhttps://www.instagram.com/jayeskar/\n\nContact - contact@futurehousecloud.com\nFor any copyright questions - copyright@futurehousecloud.com\n\n#futurehouse #futurehousecloud";
            var lines = description.Split('\n');

            List<string> chapters = new List<string>();

            foreach (var line in lines)
            {
                foreach (var word in line.Split(' '))
                {
                    TimeSpan stamp;

                    if (TimeSpan.TryParseExact(word, @"m\:ss", null, out stamp))
                    {
                        chapters.Add(line);
                        chapterStamps.Add(stamp);
                    }
                }
            }

            return chapters;
        }

        public async Task<IList<SearchResult>> byQuery(string query, type type = type.All)
        {
            string stype = "";

            switch (type)
            {
                case type.Video:
                    stype = "video";
                    break;

                case type.Channel:
                    stype = "channel";
                    break;

                case type.Playlist:
                    stype = "playlist";
                    break;
            }

            var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "AIzaSyBSFxNBKeB-vPSUz7yZFONWZq6_fHsXUHM",
                ApplicationName = this.GetType().ToString()
            });

            var searchListRequest = youtubeService.Search.List("snippet");
            searchListRequest.Q = query; // Replace with your search term.
            searchListRequest.MaxResults = 50;
            searchListRequest.Type = stype;
           
            // Call the search.list method to retrieve results matching the specified query term.
            var searchListResponse = await searchListRequest.ExecuteAsync();

            return searchListResponse.Items;
        }
    }
}